type Query {

        users(query: Int): [Post!]!
        posts(query: Int): [Post!]!
        comments: [Comment!]!
    }

    input CreateUserInput {
        name: String!
        email: String!
        age: Int
    }

    input CreatePostInput {
        title: String!
        body: String!
        published: Boolean!
        author: ID!
    }

    input UpdatePostInput {
        title: String!
        body: String!
        published: Boolean!
    }

    input CreateCommentInput {
        text: String!
        author: ID!
        post: ID!
    }

    input UpdateCommentInput {
        text: String!
    }

    type Mutation {

        createUser(data: CreateUserInput): User!

        createPost(data: CreatePostInput): Post!
        deletePost(id: ID!): Post!
        updatePost(id: ID!, data: UpdatePostInput): Post!

        createComment(data: CreateCommentInput!): Comment!
        deleteComment(id: ID!): Comment!
        updateComment(id: ID!, data: UpdateCommentInput!): Comment!
    }

    type Subscription {
        post: Post!
        comment: CommentSubscriptionPayload!
    }

    type User {
        id: ID!
        name: String!
        email: String!
        age: Int!
        comments: [Comment!]!
    }

    type Post {
        id: ID!
        title: String!
        body: String!
        published: Boolean!
        comments: [Comment!]!
    }

    type Comment {
        id: ID!
        text: String!
        author: User!
        post: Post!
    }

    type CommentSubscriptionPayload {
        mutation: String!
        data: Comment!
    }